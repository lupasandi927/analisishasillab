# -*- coding: utf-8 -*-
"""analisisHasilTesKesehatan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-wzhVzd4Q4zvAR7QvS-WzDC66cyE5xkw
"""

import streamlit as st
import pandas as pd
from fpdf import FPDF
from io import BytesIO

# Inisialisasi session state
if "data" not in st.session_state:
    st.session_state["data"] = []

st.title("📊 Aplikasi Analisis Hasil Pemeriksaan Kesehatan")

# -------------------------
# Input Identitas Pasien
# -------------------------
st.header("🧑‍⚕️ Data Pasien")
nama = st.text_input("Nama Pasien")
alamat = st.text_area("Alamat")

# -------------------------
# Menu Tambah Pemeriksaan
# -------------------------
st.header("🧪 Tambah Hasil Pemeriksaan")

pilihan = st.selectbox(
    "Pilih jenis pemeriksaan",
    ["Hemoglobin", "Gula Darah", "Kolesterol", "Tekanan Darah Sistolik", "Tekanan Darah Diastolik"]
)

nilai = st.number_input("Masukkan nilai hasil pemeriksaan", min_value=0.0, step=0.1)

# Fungsi untuk menentukan status normal/abnormal
def cek_status(jenis, val):
    if jenis == "Hemoglobin":
        return "Normal" if 13 <= val <= 17 else "Abnormal"
    elif jenis == "Gula Darah":
        return "Normal" if 70 <= val <= 140 else "Abnormal"
    elif jenis == "Kolesterol":
        return "Normal" if val < 200 else "Abnormal"
    elif jenis == "Tekanan Darah Sistolik":
        return "Normal" if 90 <= val <= 120 else "Abnormal"
    elif jenis == "Tekanan Darah Diastolik":
        return "Normal" if 60 <= val <= 80 else "Abnormal"
    else:
        return "-"

# Tombol tambah data
if st.button("➕ Tambah Pemeriksaan"):
    status = cek_status(pilihan, nilai)
    st.session_state["data"].append([pilihan, nilai, status])
    st.success(f"Hasil {pilihan} ditambahkan!")

# -------------------------
# Tabel Hasil Pemeriksaan
# -------------------------
if st.session_state["data"]:
    st.header("📋 Hasil Pemeriksaan")
    df = pd.DataFrame(st.session_state["data"], columns=["Pemeriksaan", "Nilai", "Status"])
    st.dataframe(df, use_container_width=True)

    # -------------------------
    # Tombol Download Excel
    # -------------------------
    excel_file = BytesIO()
    df.to_excel(excel_file, index=False)
    excel_file.seek(0)
    st.download_button(
        label="⬇️ Download Excel",
        data=excel_file,
        file_name=f"Hasil_{nama}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    # -------------------------
    # Tombol Download PDF
    # -------------------------
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Hasil Pemeriksaan Kesehatan", ln=True, align="C")
    pdf.cell(200, 10, txt=f"Nama: {nama}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Alamat: {alamat}", ln=True, align="L")
    pdf.ln(10)

    # Header tabel
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(60, 10, "Pemeriksaan", 1, 0, "C")
    pdf.cell(40, 10, "Nilai", 1, 0, "C")
    pdf.cell(40, 10, "Status", 1, 1, "C")

    # Isi tabel
    pdf.set_font("Arial", size=12)
    for row in st.session_state["data"]:
        pdf.cell(60, 10, str(row[0]), 1, 0, "C")
        pdf.cell(40, 10, str(row[1]), 1, 0, "C")
        pdf.cell(40, 10, str(row[2]), 1, 1, "C")

    pdf_output = BytesIO()
    pdf.output(pdf_output)
    pdf_output.seek(0)

    st.download_button(
        label="⬇️ Download PDF",
        data=pdf_output,
        file_name=f"Hasil_{nama}.pdf",
        mime="application/pdf"
    )