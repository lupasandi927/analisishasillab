# -*- coding: utf-8 -*-
"""analisisHasilTesKesehatan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-wzhVzd4Q4zvAR7QvS-WzDC66cyE5xkw
"""

# Simpan file ini sebagai: app.py
# Jalankan dengan: streamlit run app.py

import streamlit as st
import pandas as pd
from io import BytesIO
#from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
#from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet

# Data rentang nilai normal
nilai_normal = {
    "Hemoglobin (g/dL)": {"min": 13.0, "max": 17.0},
    "Gula Darah Puasa (mg/dL)": {"min": 70, "max": 100},
    "Tekanan Darah Sistolik (mmHg)": {"min": 90, "max": 120},
    "Tekanan Darah Diastolik (mmHg)": {"min": 60, "max": 80},
    "Kolesterol Total (mg/dL)": {"min": 125, "max": 200},
}

st.title("‚öïÔ∏è Analisis Pemeriksaan Kesehatan")

# =====================
# Input identitas pasien
# =====================
st.subheader("üßç Identitas Pasien")
nama = st.text_input("Nama Pasien")
alamat = st.text_area("Alamat Pasien")

# =====================
# Pilihan pemeriksaan
# =====================
st.subheader("üß™ Pilih Pemeriksaan")
pilihan = st.multiselect("Pilih jenis pemeriksaan:", list(nilai_normal.keys()))

hasil_analisis = []

# Input nilai untuk setiap pemeriksaan yang dipilih
for tes in pilihan:
    nilai = st.number_input(f"Masukkan hasil {tes}:", step=0.1, key=tes)
    if nilai != 0:  # hanya diproses kalau ada nilai
        batas = nilai_normal[tes]
        if nilai < batas["min"]:
            status = "Abnormal (Rendah)"
        elif nilai > batas["max"]:
            status = "Abnormal (Tinggi)"
        else:
            status = "Normal"

        hasil_analisis.append({
            "Nama Pasien": nama,
            "Alamat Pasien": alamat,
            "Pemeriksaan": tes,
            "Nilai": nilai,
            "Normal Range": f"{batas['min']} - {batas['max']}",
            "Status": status
        })

# =====================
# Tampilkan tabel hasil
# =====================
if hasil_analisis:
    df = pd.DataFrame(hasil_analisis)
    st.subheader("üìã Hasil Analisis")
    st.dataframe(df, use_container_width=True)

    # === Fungsi Export Excel ===
    def convert_df_to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="Hasil Analisis")
        return output.getvalue()

    # === Fungsi Export PDF ===
    def convert_df_to_pdf(df, nama, alamat):
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        elements = []
        styles = getSampleStyleSheet()

        # Judul & identitas pasien
        elements.append(Paragraph("Hasil Analisis Pemeriksaan Kesehatan", styles["Title"]))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph(f"Nama Pasien : {nama}", styles["Normal"]))
        elements.append(Paragraph(f"Alamat      : {alamat}", styles["Normal"]))
        elements.append(Spacer(1, 12))

        # Data tabel
        data = [df.columns.tolist()] + df.values.tolist()
        table = Table(data)
        table.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.lightblue),
            ("TEXTCOLOR", (0,0), (-1,0), colors.black),
            ("ALIGN", (0,0), (-1,-1), "CENTER"),
            ("GRID", (0,0), (-1,-1), 1, colors.black),
            ("FONTNAME", (0,0), (-1,0), "Helvetica-Bold"),
            ("FONTSIZE", (0,0), (-1,-1), 9),
        ]))
        elements.append(table)

        doc.build(elements)
        pdf = buffer.getvalue()
        buffer.close()
        return pdf

    # Export ke CSV
    csv = df.to_csv(index=False).encode("utf-8")

    # Tombol download
    st.download_button(
        label="üì• Download Hasil ke Excel",
        data=convert_df_to_excel(df),
        file_name=f"hasil_analisis_{nama}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    st.download_button(
        label="üì• Download Hasil ke CSV",
        data=csv,
        file_name=f"hasil_analisis_{nama}.csv",
        mime="text/csv"
    )

    st.download_button(
        label="üì• Download Hasil ke PDF",
        data=convert_df_to_pdf(df, nama, alamat),
        file_name=f"hasil_analisis_{nama}.pdf",
        mime="application/pdf"
    )